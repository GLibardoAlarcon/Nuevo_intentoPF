import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Configuraci칩n inicial del layout y tema
st.set_page_config(page_title="Dashboard Interactivo de An치lisis de Datos", layout="wide")

# Encabezado principal con formato
st.markdown("""
# *Presentaci칩n Interactiva de An치lisis de Datos* 游늵
Este dashboard interactivo presenta diferentes an치lisis relacionados con precios de reventa de autos, viajes en taxis amarillos y costos operacionales de veh칤culos.
Navega por los diferentes an치lisis para explorar las gr치ficas y an치lisis asociados. Utiliza el men칰 lateral para seleccionar y visualizar cada uno.
""", unsafe_allow_html=True)

# Sidebar para la selecci칩n de an치lisis
st.sidebar.header("Selecciona un An치lisis:")
analisis = st.sidebar.selectbox(
    'Selecciona el an치lisis',
    ('An치lisis de Precios de Reventa de Autos', 
     'An치lisis de Viajes en Taxis Amarillos', 
     'An치lisis de Costos Operacionales de Veh칤culos')
)

# Cargar los datasets utilizando rutas relativas
try:
    df_car_resale = pd.read_csv('./Data/car_resale_prices_clean.csv')
    df_yellow_taxi = pd.read_parquet('./Data/yellow_tripdata.parquet')
    df_vehicle_costs = pd.read_csv('./Data/costo_operacional_vehiculos_clean.csv')
    st.success("Datasets cargados correctamente")
except Exception as e:
    st.error(f"Error al cargar los datasets: {e}")

# Inicializar variables en session_state si no est치n presentes
if 'autos_recomendados' not in st.session_state:
    st.session_state.autos_recomendados = pd.DataFrame()  # Para almacenar autos recomendados
if 'auto_seleccionado' not in st.session_state:
    st.session_state.auto_seleccionado = None  # Para almacenar el auto seleccionado

# Funci칩n para categorizar los veh칤culos
def categorize_vehicle(row):
    if row['Fuel_Type'] in ['Diesel', 'Petrol', 'Petrol/LPG']:
        return 'Convencional'
    elif row['Fuel_Type'] in ['Electricity', 'Electric']:
        return 'El칠ctrico'
    else:
        return 'H칤brido'

# Aplicar la funci칩n al dataframe
df_car_resale['Vehicle_Type'] = df_car_resale.apply(categorize_vehicle, axis=1)

# An치lisis de Precios de Reventa de Autos
if analisis == 'An치lisis de Precios de Reventa de Autos':
    st.header('游늳 An치lisis de Precios de Reventa de Autos')
    st.markdown("""
    *Descripci칩n*: Este an치lisis muestra la distribuci칩n de los precios de reventa de autos por a침o de registro y permite filtrar autos seg칰n el presupuesto y tipo de combustible.
    """)
    
    # Crear una nueva columna para agrupar los a침os en rangos de 5 a침os
    df_car_resale['Year_Category'] = pd.cut(df_car_resale['Registered_Year'],
                                            bins=[1990, 1995, 2000, 2005, 2010, 2015, 2020],
                                            labels=['1990-1995', '1996-2000', '2001-2005', '2006-2010', '2011-2015', '2016-2020'])

    # Layout mejorado: Usamos columnas para mostrar gr치ficas y filtros
    col1, col2 = st.columns([2, 1])
    # Asegurarse de que los a침os de registro sean v치lidos (positivos y no nulos)
    df_car_resale2 = df_car_resale[df_car_resale['Registered_Year'] > 0]
    df_car_resale2['Registered_Year'] = df_car_resale2['Registered_Year'].astype(int)
    
    with col1:
        st.subheader("Distribuci칩n de Precios de Reventa por A침o de Registro")
        plt.figure(figsize=(12, 6))
        sns.boxplot(x='Registered_Year', y='Resale_Price', data=df_car_resale2, palette="Blues")
        plt.title("Distribuci칩n de Precios de Reventa por A침o de Registro", fontsize=16)
        plt.xlabel("A침o de Registro", fontsize=12)
        plt.ylabel("Precio de Reventa (USD)", fontsize=12)
        
        # Formatear las etiquetas del eje X para que sean solo n칰meros enteros
        x_labels = df_car_resale2['Registered_Year'].unique().astype(int)
        plt.xticks(ticks=range(len(x_labels)), labels=x_labels, rotation=45)
    
        st.pyplot(plt)

    st.subheader("Filtrar autos por presupuesto y tipo de combustible")
    presupuesto_cliente = st.number_input("Ingresa tu presupuesto (USD)", min_value=0, value=5000, step=1000)

    # Filtrar por tipo de combustible
    tipos_combustible = df_car_resale['Fuel_Type'].unique().tolist()
    tipos_combustible.append('Todos')  # Opci칩n para seleccionar todos los tipos
    tipo_combustible_seleccionado = st.selectbox("Selecciona el tipo de combustible", tipos_combustible, index=len(tipos_combustible)-1)

    # Bot칩n para ejecutar la b칰squeda de autos recomendados
    if st.button("Buscar autos recomendados"):
        # Aplicar filtro de presupuesto
        autos_recomendados = df_car_resale[df_car_resale['Resale_Price'] <= presupuesto_cliente]
        
        # Filtrar por tipo de combustible si no se ha seleccionado "Todos"
        if tipo_combustible_seleccionado != 'Todos':
            autos_recomendados = autos_recomendados[autos_recomendados['Fuel_Type'] == tipo_combustible_seleccionado]
        
        # Mostrar los 5 autos recomendados m치s cercanos al presupuesto
        autos_recomendados = autos_recomendados.sort_values(by='Resale_Price', ascending=False).head(1)
        
        if not autos_recomendados.empty:
            st.markdown(f"### Auto recomendado dentro del presupuesto de *${presupuesto_cliente}*:")
            st.dataframe(autos_recomendados[['Full_Name', 'Registered_Year', 'Fuel_Type', 'Resale_Price']])
            
            
            # Mostrar detalles del auto recomendado
            auto_detalles = autos_recomendados.iloc[0]
            st.markdown(f"### Detalles del auto recomendado: **{auto_detalles['Full_Name']}**")
            st.markdown(
                f"""
                - **A침o de Registro:** {int(auto_detalles['Registered_Year'])}
                - **Transmisi칩n:** {auto_detalles['Transmission_Type']}
                - **Tipo de Combustible:** {auto_detalles['Fuel_Type']}
                - **Categor칤a de Combustible:** {auto_detalles['Vehicle_Type']}
                - **Potencia M치xima:** {auto_detalles['Max_Power']}
                - **Precio de Reventa:** **${auto_detalles['Resale_Price']:,.2f}**
                """
            )
        else:
            st.text(f"No se encontraron autos dentro del presupuesto de ${presupuesto_cliente}.")
            
# An치lisis de Viajes en Taxis Amarillos
elif analisis == 'An치lisis de Viajes en Taxis Amarillos':
    st.header('游뚯 An치lisis de Viajes en Taxis Amarillos')
    st.markdown("""
    *Descripci칩n*: Este an치lisis muestra la cantidad de viajes realizados por taxis amarillos a lo largo del tiempo.
    """)

    grafico_taxis = st.selectbox(
        'Selecciona la gr치fica para Viajes en Taxis Amarillos',
        ('Cantidad de Viajes por A침o', 'Distancia vs Duraci칩n del Viaje')
    )

    if grafico_taxis == 'Cantidad de Viajes por A침o':
        st.subheader("Cantidad de Viajes por A침o")
        df_yellow_taxi['pickup_year'] = pd.to_datetime(df_yellow_taxi['pickup_datetime']).dt.year
        plt.figure(figsize=(10, 5))
        sns.countplot(x='pickup_year', data=df_yellow_taxi)
        plt.title("Cantidad de Viajes por A침o")
        plt.xlabel("A침o")
        plt.ylabel("N칰mero de Viajes")
        st.pyplot(plt)
    
    elif grafico_taxis == 'Distancia vs Duraci칩n del Viaje':
        st.subheader("Relaci칩n entre Distancia y Duraci칩n del Viaje")
        plt.figure(figsize=(10, 5))
        sns.scatterplot(x='trip_distance', y='trip_duration', data=df_yellow_taxi)
        plt.title("Distancia vs Duraci칩n del Viaje")
        plt.xlabel("Distancia del Viaje (millas)")
        plt.ylabel("Duraci칩n del Viaje (minutos)")
        st.pyplot(plt)

# An치lisis de Costos Operacionales de Veh칤culos
elif analisis == 'An치lisis de Costos Operacionales de Veh칤culos':
    # Filtrar para eliminar cualquier fila que tenga 'Electricity'
    df_vehicle_costs = df_vehicle_costs[df_vehicle_costs['Fuel_Type'] != 'Electricity']

    st.header('游뚱 An치lisis de Costos Operacionales de Veh칤culos')
    st.markdown("""
    *Descripci칩n*: Este an치lisis muestra los costos operacionales de veh칤culos seg칰n su tipo de combustible.
    """)

    # Selecci칩n de la gr치fica para mostrar
    grafico_costos = st.selectbox(
        'Selecciona la gr치fica para Costos Operacionales',
        ('Costos Operacionales por Tipo de Combustible',)
    )

    if grafico_costos == 'Costos Operacionales por Tipo de Combustible':
        st.subheader("Costos Operacionales por Tipo de Combustible")
        
        # Definir el tama침o del gr치fico
        plt.figure(figsize=(10, 5))

        # Paleta de colores para las barras (usamos una paleta de colores variada)
        palette = sns.color_palette("husl", len(df_vehicle_costs['Fuel_Type'].unique()))

        # Gr치fico de barras con colores variados
        sns.barplot(x='Fuel_Type', y='Fuel_Cost', data=df_vehicle_costs, ci=None, palette=palette)
        
        # Ajustar t칤tulo y etiquetas
        plt.title("Costos Operacionales por Tipo de Combustible", fontsize=16)
        plt.xlabel("Tipo de Combustible", fontsize=12)
        plt.ylabel("Costo de Combustible (GBP)", fontsize=12)
        
        # Rotar etiquetas para mejorar la legibilidad
        plt.xticks(rotation=45, ha='right')

        # Mostrar gr치fico en Streamlit
        st.pyplot(plt)

        # Comparaci칩n de tipos de combustible (tabla con valores promedio)
        st.subheader("Comparaci칩n de Costos de Combustibles")
        fuel_comparison = df_vehicle_costs.groupby('Fuel_Type')['Fuel_Cost'].mean().reset_index()
        st.table(fuel_comparison)

        # Aplicar la funci칩n al dataframe
        df_vehicle_costs['Vehicle_Type'] = df_vehicle_costs.apply(categorize_vehicle, axis=1)

        # Sumar costos por tipo de veh칤culo
        total_cost_conventional = df_vehicle_costs[df_vehicle_costs['Vehicle_Type'] == 'Convencional']['Total_Cost'].sum()
        total_cost_electric_hybrid = df_vehicle_costs[df_vehicle_costs['Vehicle_Type'].isin(['El칠ctrico', 'H칤brido'])]['Total_Cost'].sum()

        # Calcular el KPI
        kpi = (total_cost_electric_hybrid / total_cost_conventional) * 100
        
        # Mostrar el KPI de manera est칠tica
        st.markdown("### Ahorro en Costos Operativos")
        st.metric(label="Ahorro de Costos Operativos (%)", value=f"{kpi:.2f}%", delta="vs. Convencional")

        # Gr치fico circular para mostrar la comparaci칩n
        labels = ['Ahorro (El칠ctrico/H칤brido)', 'Costo Convencional']
        sizes = [total_cost_electric_hybrid, total_cost_conventional]
        colors = ['#4CAF50', '#FFC107']  # Colores para el gr치fico
        
        plt.figure(figsize=(8, 8))
        plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)
        plt.title('Comparaci칩n de Costos Operacionales', fontsize=16)
        plt.axis('equal')  # Para que el gr치fico sea un c칤rculo
        
        # Mostrar el gr치fico en Streamlit
        st.pyplot(plt)